# this is draft for snippets

# json field tag
#type ${1:`!v  go#util#snippetcase(matchstr(getline("."), '\w\+'))`} struct {
#snippet .v "\`json:key\`"
#	`!v deletebufline(bufname(), getline("."))`
#}
#endsnippet

# json field tag
snippet json "\`json:key\`"
\`json:"${1:`!v  go#util#snippetcase(matchstr(getline("."), '\w\+'))`}"\`
endsnippet

# yaml field tag
snippet yaml "\`yaml:key\`"
\`yaml:"${1:`!v  go#util#snippetcase(matchstr(getline("."), '\w\+'))`}"\`
endsnippet

# error test
snippet errt "Error test fatal " !b
if err != nil {
	t.Fatal(err)
}
${0}
endsnippet

# error handle
snippet errh "Error handle and return" !b
if err != nil {
	${1}
	return
}
${0}
endsnippet

snippet errn,wf "Error return wrapf with two return values" !b
if err != nil {
	return nil, errors.Wrapf(err, "${1:message %v}", ${2:args...})
}
${0}
endsnippet

# error panic
snippet errp "Error panic" !b
if err != nil {
	panic(${1})
}
${0}
endsnippet

# error multiple return
snippet errn, "Error return with two return values" !b
if err != nil {
	return ${1:nil}, ${2:err}
}
${0}
endsnippet

snippet errn,w "Error return wrap with two return values" !b
if err != nil {
	return nil, errors.Wrap(err, "${1:message}")
}
${0}
endsnippet

snippet errnwf "Error return wrapf" !b
if err != nil {
	return errors.Wrapf(err, "${1:message %v}", ${2:args...})
}
${0}
endsnippet

snippet errl "Error with log.Fatal(err)" !b
if err != nil {
	log.Fatal(err)
}
${0}
endsnippet

snippet errn "Error return" !b
if err != nil {
	return err
}
${0}
endsnippet

snippet errnw "Error return wrap" !b
if err != nil {
	return errors.Wrap(err, "${1:message}")
}
${0}
endsnippet

# test error handling
snippet ter "if err != nil { t.Errorf(...) }"
if err != nil {
	t.Errorf("${0:message}")
}
endsnippet

# test fatal error
snippet terf "if err != nil { t.Fatalf(...) }"
if err != nil {
	t.Fatalf("${0:message}")
}
endsnippet

# Fmt Errorf wrap and return
snippet errnfw "Error return fmt.Errorf(%w, err)" !b
if ${1:${VISUAL:err}} != nil {
	return fmt.Errorf("${2:message}: %w", $1)
}
endsnippet

# test function
snippet test "func TestXYZ(t *testing.T) { ... }"
func Test${1:Function}(t *testing.T) {
	${0:${VISUAL}}
}
endsnippet





# test t.Run
snippet tr "t.Run(XYZ, func(t *testing.T){ ... })"
t.Run("${0}", func(t *testing.T){

})
endsnippet

# test table snippet
snippet tt
var tests = []struct {
	name string
	expected string
	given string
}{
	{"${1}", "${2}", "${3}",},
}
for _, tt := range tests {
	tt := tt
	t.Run(tt.name, func(t *testing.T){
		actual := ${0:${VISUAL}}(tt.given)
		if actual != tt.expected {
				t.Errorf("$0(%s): expected %s, actual %s", tt.given, tt.expected, actual)
		}

	})
}
endsnippet





snippet hf "http.HandlerFunc"
func ${1:handler}(w http.ResponseWriter, r *http.Request) {
	${0:fmt.Fprintf(w, "hello world")}
}
endsnippet

snippet hhf "mux.HandleFunc" !b
${1:http}.HandleFunc("${2:/}", func(w http.ResponseWriter, r *http.Request) {
	${0:fmt.Fprintf(w, "hello world")}
})
endsnippet

# quick test server
snippet tsrv "httptest.NewServer"
ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintln(w, ${1:`response`})
}))
defer ts.Close()

${0:someUrl} = ts.URL
endsnippet



snippet example "func ExampleXYZ() { ... }"
func Example${1:Method}() {
	${0:${VISUAL}}
	// Output:
}
endsnippet

snippet benchmark "func BenchmarkXYZ(b *testing.B) { ... }"
func Benchmark${1:Method}(b *testing.B) {
	for i := 0; i < b.N; i++ {
		${0:${VISUAL}}
	}
}
endsnippet



# equals fails the test if exp is not equal to act.
snippet eq "equals: test two identifiers with DeepEqual"
if !reflect.DeepEqual(${1:expected}, ${2:actual}) {
	_, file, line, _ := runtime.Caller(0)
	fmt.Printf("%s:%d:\n\n\texp: %#v\n\n\tgot: %#v\n\n", filepath.Base(file), line, $1, $2)
	t.FailNow()
}
endsnippet





####################################################################################################
# gpl
snippet gpl
/*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, see <http://www.gnu.org/licenses/>.
*
* Copyright (C) ${1:Author}, `!v strftime("%Y")`
*/
${0}
endsnippet

# anonymous function
snippet anon "fn := func() { ... }"
${1:fn} := func() {
	${2:${VISUAL}}
}
${0}
endsnippet

# constants with iota
snippet iota "const ( ... = iota )"
const (
	${1:<NAME>} ${2:<Type>} = iota
	${0}
)
endsnippet

snippet forsel "for select"
for {
	select {
		case ${2:${1:result} := }<- ${3:channel}:
			${0}
	}
}
endsnippet

snippet selc "select case" !b
case ${1:${2:var} := }<-${3:channel}:
  ${0}
endsnippet

# Fmt Printf debug with hash
snippet ffh "fmt.Printf(#...) hash"
fmt.Printf("$1 = %#v\n", ${1:${VISUAL}})
endsnippet

snippet tswitch "type switch x { ... }"
switch ${2:$1 := }${1:v}.(type) {
	${0}
}
endsnippet

